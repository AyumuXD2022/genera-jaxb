@Component
public class JwtAuthenticationEntryPoint implements AuthenticationEntryPoint {
    
    @Override
    public void commence(HttpServletRequest request, HttpServletResponse response,
                       AuthenticationException authException) throws IOException {
        
        response.setStatus(HttpStatus.UNAUTHORIZED.value());
        response.setContentType("application/json");
        
        Map<String, Object> error = new HashMap<>();
        error.put("message", "No autenticado");
        error.put("description", "Credenciales inv√°lidas o faltantes");
        error.put("code", 401);
        error.put("category", "Unauthorized");
        error.put("action", "provide_valid_token");
        error.put("severity", "ERROR");
        
        new ObjectMapper().writeValue(response.getWriter(), error);
    }
}

@Component
public class CustomAccessDeniedHandler implements AccessDeniedHandler {
    
    @Override
    public void handle(HttpServletRequest request, HttpServletResponse response,
                      AccessDeniedException accessDeniedException) throws IOException {
        
        response.setStatus(HttpStatus.FORBIDDEN.value());
        response.setContentType("application/json");
        
        Map<String, Object> error = new HashMap<>();
        error.put("message", "Acceso denegado");
        error.put("description", "No tienes permisos para acceder a este recurso");
        error.put("code", 403);
        error.put("category", "Forbidden");
        error.put("action", "request_higher_privileges");
        error.put("severity", "WARN");
        
        new ObjectMapper().writeValue(response.getWriter(), error);
    }
}

.exceptionHandling(exception -> exception
                .authenticationEntryPoint(authenticationEntryPoint) // 401
                .accessDeniedHandler(accessDeniedHandler)           // 403
            );






------------
package mx.com.backend.auth_service.components;

import com.fasterxml.jackson.databind.ObjectMapper;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.MediaType;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.web.AuthenticationEntryPoint;
import org.springframework.stereotype.Component;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

@Slf4j
@Component
public class JwtAuthenticationEntryPoint implements AuthenticationEntryPoint {

    private final ObjectMapper objectMapper = new ObjectMapper();

    @Override
    public void commence(HttpServletRequest request, HttpServletResponse response,
                       AuthenticationException authException) throws IOException, ServletException {
        
        log.error("üö´ Error de autenticaci√≥n: {} - Path: {}", 
                 authException.getMessage(), request.getRequestURI());
        
        response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
        response.setContentType(MediaType.APPLICATION_JSON_VALUE);
        response.setCharacterEncoding("UTF-8");
        
        String errorDescription = getErrorDescription(authException);
        String action = getAction(authException);
        
        Map<String, Object> error = new HashMap<>();
        error.put("message", "Acceso no autorizado");
        error.put("description", errorDescription);
        error.put("code", 401);
        error.put("category", "Unauthorized");
        error.put("path", request.getRequestURI());
        error.put("timestamp", LocalDateTime.now().toString());
        error.put("action", action);
        error.put("uuid", UUID.randomUUID().toString());
        error.put("severity", "ERROR");
        
        // Aseg√∫rate de escribir la respuesta correctamente
        objectMapper.writeValue(response.getWriter(), error);
        response.getWriter().flush();
    }
    
    private String getErrorDescription(AuthenticationException authException) {
        String exceptionMessage = authException.getMessage();
        
        if (exceptionMessage.contains("JWT expired")) {
            return "El token JWT ha expirado. Por favor, obt√©n un nuevo token de autenticaci√≥n.";
        } else if (exceptionMessage.contains("JWT signature") || exceptionMessage.contains("signature")) {
            return "La firma del token JWT no es v√°lida. El token puede haber sido alterado.";
        } else if (exceptionMessage.contains("Unable to parse") || exceptionMessage.contains("malformed")) {
            return "El formato del token JWT es inv√°lido. Verifica que el token est√© correctamente formado.";
        } else if (exceptionMessage.contains("Full authentication is required")) {
            return "Se requiere autenticaci√≥n completa para acceder a este recurso. Por favor, proporciona un token v√°lido.";
        } else {
            return "Error de autenticaci√≥n: " + authException.getMessage();
        }
    }
    
    private String getAction(AuthenticationException authException) {
        String exceptionMessage = authException.getMessage();
        
        if (exceptionMessage.contains("JWT expired")) {
            return "refresh_token";
        } else if (exceptionMessage.contains("JWT signature") || exceptionMessage.contains("Unable to parse")) {
            return "request_new_token";
        } else if (exceptionMessage.contains("Full authentication is required")) {
            return "provide_credentials";
        } else {
            return "contact_support";
        }
    }
}




.authenticationEntryPoint(jwtAuthenticationEntryPoint) 
