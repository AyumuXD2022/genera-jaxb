@Component
public class JwtAuthenticationEntryPoint implements AuthenticationEntryPoint {
    
    @Override
    public void commence(HttpServletRequest request, HttpServletResponse response,
                       AuthenticationException authException) throws IOException {
        
        response.setStatus(HttpStatus.UNAUTHORIZED.value());
        response.setContentType("application/json");
        
        Map<String, Object> error = new HashMap<>();
        error.put("message", "No autenticado");
        error.put("description", "Credenciales inv치lidas o faltantes");
        error.put("code", 401);
        error.put("category", "Unauthorized");
        error.put("action", "provide_valid_token");
        error.put("severity", "ERROR");
        
        new ObjectMapper().writeValue(response.getWriter(), error);
    }
}

@Component
public class CustomAccessDeniedHandler implements AccessDeniedHandler {
    
    @Override
    public void handle(HttpServletRequest request, HttpServletResponse response,
                      AccessDeniedException accessDeniedException) throws IOException {
        
        response.setStatus(HttpStatus.FORBIDDEN.value());
        response.setContentType("application/json");
        
        Map<String, Object> error = new HashMap<>();
        error.put("message", "Acceso denegado");
        error.put("description", "No tienes permisos para acceder a este recurso");
        error.put("code", 403);
        error.put("category", "Forbidden");
        error.put("action", "request_higher_privileges");
        error.put("severity", "WARN");
        
        new ObjectMapper().writeValue(response.getWriter(), error);
    }
}

.exceptionHandling(exception -> exception
                .authenticationEntryPoint(authenticationEntryPoint) // 401
                .accessDeniedHandler(accessDeniedHandler)           // 403
            );






------------
package mx.com.backend.auth_service.components;

import com.fasterxml.jackson.databind.ObjectMapper;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.MediaType;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.web.AuthenticationEntryPoint;
import org.springframework.stereotype.Component;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

@Slf4j
@Component
public class JwtAuthenticationEntryPoint implements AuthenticationEntryPoint {

    private final ObjectMapper objectMapper = new ObjectMapper();

    @Override
    public void commence(HttpServletRequest request, HttpServletResponse response,
                       AuthenticationException authException) throws IOException, ServletException {
        
        log.error("游뛂 Error de autenticaci칩n: {} - Path: {}", 
                 authException.getMessage(), request.getRequestURI());
        
        response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
        response.setContentType(MediaType.APPLICATION_JSON_VALUE);
        response.setCharacterEncoding("UTF-8");
        
        String errorDescription = getErrorDescription(authException);
        String action = getAction(authException);
        
        Map<String, Object> error = new HashMap<>();
        error.put("message", "Acceso no autorizado");
        error.put("description", errorDescription);
        error.put("code", 401);
        error.put("category", "Unauthorized");
        error.put("path", request.getRequestURI());
        error.put("timestamp", LocalDateTime.now().toString());
        error.put("action", action);
        error.put("uuid", UUID.randomUUID().toString());
        error.put("severity", "ERROR");
        
        // Aseg칰rate de escribir la respuesta correctamente
        objectMapper.writeValue(response.getWriter(), error);
        response.getWriter().flush();
    }
    
    private String getErrorDescription(AuthenticationException authException) {
        String exceptionMessage = authException.getMessage();
        
        if (exceptionMessage.contains("JWT expired")) {
            return "El token JWT ha expirado. Por favor, obt칠n un nuevo token de autenticaci칩n.";
        } else if (exceptionMessage.contains("JWT signature") || exceptionMessage.contains("signature")) {
            return "La firma del token JWT no es v치lida. El token puede haber sido alterado.";
        } else if (exceptionMessage.contains("Unable to parse") || exceptionMessage.contains("malformed")) {
            return "El formato del token JWT es inv치lido. Verifica que el token est칠 correctamente formado.";
        } else if (exceptionMessage.contains("Full authentication is required")) {
            return "Se requiere autenticaci칩n completa para acceder a este recurso. Por favor, proporciona un token v치lido.";
        } else {
            return "Error de autenticaci칩n: " + authException.getMessage();
        }
    }
    
    private String getAction(AuthenticationException authException) {
        String exceptionMessage = authException.getMessage();
        
        if (exceptionMessage.contains("JWT expired")) {
            return "refresh_token";
        } else if (exceptionMessage.contains("JWT signature") || exceptionMessage.contains("Unable to parse")) {
            return "request_new_token";
        } else if (exceptionMessage.contains("Full authentication is required")) {
            return "provide_credentials";
        } else {
            return "contact_support";
        }
    }
}




.authenticationEntryPoint(jwtAuthenticationEntryPoint) 



----------------------



package mx.com.backend.auth_service.components;

import com.fasterxml.jackson.databind.ObjectMapper;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.MediaType;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.oauth2.server.resource.BearerTokenError;
import org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationEntryPoint;
import org.springframework.security.web.AuthenticationEntryPoint;
import org.springframework.stereotype.Component;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.UUID;

@Slf4j
@Component
public class OAuth2AuthenticationEntryPoint implements AuthenticationEntryPoint {

    private final BearerTokenAuthenticationEntryPoint delegate = new BearerTokenAuthenticationEntryPoint();
    private final ObjectMapper objectMapper = new ObjectMapper();

    @Override
    public void commence(HttpServletRequest request, HttpServletResponse response,
                       AuthenticationException authException) throws IOException, ServletException {
        
        log.error("游뛂 OAuth2 Authentication Error: {} - Path: {}",
                 authException.getMessage(), request.getRequestURI());

        // Primero delegamos en el entry point por defecto de OAuth2 para establecer el WWW-Authenticate header
        delegate.commence(request, response, authException);
        
        // Luego sobrescribimos la respuesta con nuestro formato JSON
        response.setContentType(MediaType.APPLICATION_JSON_VALUE);
        response.setCharacterEncoding("UTF-8");
        
        Map<String, Object> error = buildErrorResponse(request, authException);
        objectMapper.writeValue(response.getWriter(), error);
    }

    private Map<String, Object> buildErrorResponse(HttpServletRequest request, AuthenticationException authException) {
        String errorDescription = getErrorDescription(authException);
        String errorCode = getErrorCode(authException);
        
        Map<String, Object> error = new LinkedHashMap<>();
        error.put("message", "Acceso no autorizado");
        error.put("description", errorDescription);
        error.put("code", 401);
        error.put("error_code", errorCode);
        error.put("category", "Unauthorized");
        error.put("path", request.getRequestURI());
        error.put("timestamp", LocalDateTime.now().toString());
        error.put("action", getAction(authException));
        error.put("uuid", UUID.randomUUID().toString());
        error.put("severity", "ERROR");
        
        return error;
    }

    private String getErrorDescription(AuthenticationException authException) {
        if (authException.getCause() instanceof BearerTokenError bearerTokenError) {
            return switch (bearerTokenError.getErrorCode()) {
                case "invalid_token" -> "Token de acceso inv치lido o malformado";
                case "insufficient_scope" -> "El token no tiene los scopes requeridos";
                case "invalid_request" -> "Solicitud de autenticaci칩n inv치lida";
                default -> "Error de autenticaci칩n OAuth2: " + bearerTokenError.getDescription();
            };
        }
        
        String exceptionMessage = authException.getMessage();
        if (exceptionMessage.contains("expired")) {
            return "El token de acceso ha expirado";
        } else if (exceptionMessage.contains("signature")) {
            return "Firma del token inv치lida";
        } else if (exceptionMessage.contains("malformed")) {
            return "Token malformado";
        }
        
        return "Error de autenticaci칩n: " + authException.getMessage();
    }

    private String getErrorCode(AuthenticationException authException) {
        if (authException.getCause() instanceof BearerTokenError bearerTokenError) {
            return bearerTokenError.getErrorCode();
        }
        return "invalid_token";
    }

    private String getAction(AuthenticationException authException) {
        String errorCode = getErrorCode(authException);
        
        return switch (errorCode) {
            case "invalid_token", "expired" -> "refresh_token";
            case "insufficient_scope" -> "request_higher_privileges";
            case "invalid_request" -> "provide_valid_credentials";
            default -> "contact_support";
        };
    }
}


.oauth2ResourceServer(oauth2 -> oauth2
                .jwt(jwt -> jwt
                    .jwtAuthenticationConverter(jwtAuthenticationConverter())
                )
                .authenticationEntryPoint(oauth2AuthenticationEntryPoint) // 춰ESTO ES CLAVE!
            );
