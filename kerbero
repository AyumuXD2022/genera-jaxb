[libdefaults]
    default_realm = EMPRESA.LOCAL
    dns_lookup_realm = false
    dns_lookup_kdc = false
    ticket_lifetime = 24h
    renew_lifetime = 7d
    forwardable = true
    # Algoritmos compatibles con JDK 1.8
    default_tgs_enctypes = aes128-cts-hmac-sha1-96 rc4-hmac des-cbc-crc des-cbc-md5
    default_tkt_enctypes = aes128-cts-hmac-sha1-96 rc4-hmac des-cbc-crc des-cbc-md5
    permitted_enctypes = aes128-cts-hmac-sha1-96 rc4-hmac des-cbc-crc des-cbc-md5

[realms]
    EMPRESA.LOCAL = {
        kdc = kdc01.empresa.local:88
        admin_server = kdc01.empresa.local:749
        default_domain = empresa.local
    }

[domain_realm]
    .empresa.local = EMPRESA.LOCAL
    empresa.local = EMPRESA.LOCAL


jaas.conf

SQLJDBCDriver {
    com.sun.security.auth.module.Krb5LoginModule required
    useTicketCache=true
    renewTGT=false
    doNotPrompt=true
    useKeyTab=true
    keyTab="C:/kerberos/sqlserver.keytab"
    principal="MSSQLSvc/dbserver01.empresa.local@EMPRESA.LOCAL"
    storeKey=true
    isInitiator=true
    debug=true;
};

Client {
    com.sun.security.auth.module.Krb5LoginModule required
    useTicketCache=true
    renewTGT=false
    doNotPrompt=false
    useKeyTab=false
    debug=true;
};














import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.security.auth.Subject;
import javax.security.auth.login.LoginContext;
import javax.security.auth.login.LoginException;
import java.security.PrivilegedExceptionAction;
import java.security.PrivilegedActionException;

public class KerberosConnectionJDK8 {
    
    // Configuración de conexión
    private static final String HOSTNAME = "dbserver01.empresa.local";
    private static final String IP = "192.168.10.25";
    private static final String INSTANCIA = "SQLPROD01";
    private static final String BASE_DATOS = "SistemaVentas";
    private static final int PUERTO = 1433;
    
    static {
        // Configuración de propiedades del sistema para JDK 1.8
        configurarKerberos();
    }
    
    private static void configurarKerberos() {
        // Rutas de configuración
        System.setProperty("java.security.krb5.conf", "C:/kerberos/krb5.ini");
        System.setProperty("java.security.auth.login.config", "C:/kerberos/jaas.conf");
        
        // Propiedades específicas de JDK 1.8
        System.setProperty("javax.security.auth.useSubjectCredsOnly", "false");
        System.setProperty("sun.security.krb5.debug", "true");
        
        // Workaround para JDK 1.8 con Windows
        System.setProperty("java.security.krb5.realm", "EMPRESA.LOCAL");
        System.setProperty("java.security.krb5.kdc", "kdc01.empresa.local");
        
        // Permitir weak crypto si es necesario (JDK 1.8u161+)
        System.setProperty("jdk.security.allowNonCaAnchor", "true");
    }
    
    public Connection obtenerConexion() throws SQLException {
        Connection connection = null;
        
        try {
            // Login con Kerberos
            LoginContext lc = new LoginContext("SQLJDBCDriver");
            lc.login();
            
            Subject subject = lc.getSubject();
            
            // Ejecutar con privilegios Kerberos
            connection = Subject.doAs(subject, 
                new PrivilegedExceptionAction<Connection>() {
                    @Override
                    public Connection run() throws SQLException {
                        return crearConexion();
                    }
                }
            );
            
        } catch (LoginException le) {
            throw new SQLException("Error de autenticación Kerberos: " + le.getMessage(), le);
        } catch (PrivilegedActionException pae) {
            throw new SQLException("Error al ejecutar con privilegios: " + pae.getMessage(), pae);
        }
        
        return connection;
    }
    
    private Connection crearConexion() throws SQLException {
        // Driver JDBC para SQL Server compatible con JDK 1.8
        // Usar sqljdbc42.jar para JDK 1.8
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
        } catch (ClassNotFoundException e) {
            throw new SQLException("Driver SQL Server no encontrado", e);
        }
        
        // URL de conexión con Kerberos
        String connectionUrl = construirURL();
        
        System.out.println("Conectando a: " + connectionUrl);
        
        return DriverManager.getConnection(connectionUrl);
    }
    
    private String construirURL() {
        // Opción 1: Usando hostname
        String url = String.format(
            "jdbc:sqlserver://%s:%d;instanceName=%s;databaseName=%s;" +
            "integratedSecurity=true;authenticationScheme=JavaKerberos",
            HOSTNAME, PUERTO, INSTANCIA, BASE_DATOS
        );
        
        // Opción 2: Usando IP (comentado)
        /*
        String url = String.format(
            "jdbc:sqlserver://%s:%d;instanceName=%s;databaseName=%s;" +
            "integratedSecurity=true;authenticationScheme=JavaKerberos;" +
            "serverSpn=MSSQLSvc/%s:%d",
            IP, PUERTO, INSTANCIA, BASE_DATOS, HOSTNAME, PUERTO
        );
        */
        
        return url;
    }
    
    // Método principal para pruebas
    public static void main(String[] args) {
        KerberosConnectionJDK8 connector = new KerberosConnectionJDK8();
        Connection conn = null;
        
        try {
            System.out.println("=== Iniciando conexión Kerberos con JDK 1.8 ===");
            System.out.println("Java Version: " + System.getProperty("java.version"));
            
            conn = connector.obtenerConexion();
            
            if (conn != null && !conn.isClosed()) {
                System.out.println("✓ Conexión exitosa!");
                
                // Prueba de consulta
                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery("SELECT @@VERSION AS Version");
                
                if (rs.next()) {
                    System.out.println("SQL Server Version: " + rs.getString("Version"));
                }
                
                rs.close();
                stmt.close();
            }
            
        } catch (SQLException e) {
            System.err.println("✗ Error de conexión: " + e.getMessage());
            e.printStackTrace();
        } finally {
            if (conn != null) {
                try {
                    conn.close();
                    System.out.println("Conexión cerrada.");
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }
}
