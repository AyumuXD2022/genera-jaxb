configurations {
    jaxws
}

dependencies {
    jaxws 'com.sun.xml.ws:jaxws-tools:4.0.1'
    implementation 'com.sun.xml.ws:jaxws-rt:4.0.1'
}

// Definir los 3 WSDLs con sus paquetes
def wsdlConfigurations = [
    [
        name: "CountryInfo",
        url: "http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL",
        pkg: "com.example.demo.wsdl.countryinfo"
    ],
    [
        name: "NumberConversion",
        url: "https://www.dataaccess.com/webservicesserver/NumberConversion.wso?WSDL",
        pkg: "com.example.demo.wsdl.numberconversion"
    ],
    [
        name: "OtroServicio",
        url: "https://tudominio.com/servicio?wsdl",
        pkg: "com.example.demo.wsdl.otroservicio"
    ]
]

// Crear tareas dinÃ¡micas para cada WSDL
wsdlConfigurations.each { config ->
    task "wsimport${config.name}"(type: Copy) {
        ext.sourcesDir = "${buildDir}/generated-sources/wsimport/${config.name}"
        ext.wsdl = config.url
        ext.pkg = config.pkg

        doLast {
            project.ant {
                taskdef name: 'wsimport',
                        classname: 'com.sun.tools.ws.ant.WsImport',
                        classpath: configurations.jaxws.asPath

                mkdir(dir: sourcesDir)

                wsimport(
                    keep: true,
                    destdir: sourcesDir,
                    package: ext.pkg,
                    wsdl: ext.wsdl,
                    verbose: true,
                    xnocompile: true
                )
            }
        }
    }
}

// Tarea principal que ejecuta todas las generaciones
task wsimportAll {
    dependsOn wsdlConfigurations.collect { "wsimport${it.name}" }
}

sourceSets {
    main {
        java {
            srcDirs += wsdlConfigurations.collect { 
                tasks.getByName("wsimport${it.name}").sourcesDir 
            }
        }
    }
}

compileJava.dependsOn wsimportAll
